# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MPA9EKw7Y3_Gr2Z-ASk_TBZbxChJzgeC
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun May 17 16:47:48 2020

@author: akshay9
"""

import pandas as pd
from keras.models import Sequential
from keras.layers import Dense, Flatten, Dropout
from keras.layers import Conv1D
from keras.layers import MaxPooling1D
from keras.utils import to_categorical
import matplotlib.pyplot as plt

dataset = pd.read_csv('labelledW2Vec.csv')
X = dataset.iloc[:,:-2].values
y = dataset.iloc[:,512].values

X_train = X[0:5600]
X_test = X[5600:6301]
y_train = y[0:5600]
y_test = y[5600:6301]

#input_shape_new = (rows,cols)
X_train = X_train.reshape(X_train.shape[0],X_train.shape[1],1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1],1)

#one hot encode the target column
y_train_labels = to_categorical(y_train)
y_test_labels = to_categorical(y_test)


print(X_train.shape)
print(X_test.shape)
#y_train = y_train.reshape(1,rows)


#architecture
model = Sequential()
model.add(Conv1D(32,2,activation='relu', data_format = "channels_last"))
model.add(MaxPooling1D(2))
model.add(Conv1D(256, 2, activation='relu'))
model.add(MaxPooling1D(2))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(7, activation='softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])
history_model = model.fit(X_train, y_train_labels,
          epochs=100, validation_data = (X_test,y_test_labels)
          )


test_loss, test_acc = model.evaluate(X_test, y_test_labels)

test_loss, test_acc = model.evaluate(X_test, y_test_labels)
print("Test Accuracy",test_acc)
print("Test loss",test_loss)


loss = history_model.history['loss']
val_loss = history_model.history['val_loss']
epochs = range(1, len(loss) + 1)
plt.plot(epochs, loss, 'b', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and Validation loss of CNN over labelled features')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

acc = history_model.history['accuracy']
val_accuracy = history_model.history['val_accuracy']
epochs = range(1, len(acc) + 1)
plt.plot(epochs, acc, 'b', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'r', label='Validation accuracy')
plt.title('Training and Validation accuracy of CNN over labelled features')
plt.xlabel('Epochs')
plt.ylabel('accuracy')
plt.legend()
plt.show()